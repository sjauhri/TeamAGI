import pickle
import numpy as np
import os
import dask.dataframe as dd
import dask.bag as db
from io import StringIO
import dask.diagnostics as diag
import dask.multiprocessing
import logging
import bokeh.plotting as bplt
from dask.distributed import Client, LocalCluster
import h5py

'''
6D maps: "https://archimedes.ias.informatik.tu-darmstadt.de/s/5nnZRXSjAzGG8Hn"
1) pkl_p3TOp2(): Modify the pkl file generated by python3 env to make it available for python2
2) clip_maps(height, boundary): clip the map with boundary along z axis
'''

# def pkl_p3TOp2():
#     # Modify the pkl file generated by python3 to make it available for python2
#     path_maps_6D_p3_l = "/home/qiao/Proj_Robman/maps/maps_6D_p3/filt_reach_map_gripper_left_grasping_frame_torso_False.pkl"
#     path_maps_6D_p3_r = "/home/qiao/Proj_Robman/maps/maps_6D_p3/filt_reach_map_gripper_right_grasping_frame_torso_False.pkl"
#     map_l = pickle.load(open(path_maps_6D_p3_l, 'rb'))
#     map_r = pickle.load(open(path_maps_6D_p3_r, 'rb'))
#     path_maps_6D_p2_l = "/home/qiao/Proj_Robman/maps/maps_6D_p2/filt_reach_map_gripper_left_grasping_frame_torso_False.pkl"
#     path_maps_6D_p2_r = "/home/qiao/Proj_Robman/maps/maps_6D_p2/filt_reach_map_gripper_right_grasping_frame_torso_False.pkl"
#     pickle.dump(map_l, open(path_maps_6D_p2_l, "wb"), protocol=2)
#     pickle.dump(map_r, open(path_maps_6D_p2_r, "wb"), protocol=2)


def pkl_p3TOp2():
    # Modify the pkl file generated by python3 to make it available for python2
    path_maps_6D_p3_l = "/home/qiao/Proj_Robman/maps/maps_6D_p3/full_reach_map_gripper_left_grasping_frame_torso_False_0.05_2023-02-20-18-03-25.pkl"
    path_maps_6D_p3_r = "/home/qiao/Proj_Robman/maps/maps_6D_p3/full_reach_map_gripper_right_grasping_frame_torso_False_0.05_2023-02-20-18-21-29.pkl"

    map_l = pickle.load(open(path_maps_6D_p3_l, 'rb'))
    map_r = pickle.load(open(path_maps_6D_p3_r, 'rb'))
    path_maps_6D_p2_l = "/home/qiao/Proj_Robman/maps/maps_6D_p2/full_reach_map_gripper_left.h5"
    path_maps_6D_p2_r = "/home/qiao/Proj_Robman/maps/maps_6D_p2/full_reach_map_gripper_right.h5"

    # pickle.dump(map_l, open(path_maps_6D_p2_l, "wb"), protocol=4)
    # pickle.dump(map_r, open(path_maps_6D_p2_r, "wb"), protocol=4)

    with h5py.File(path_maps_6D_p2_l, "w") as f:
        f.create_dataset("map_l",
                         data=map_l,
                         compression="gzip",
                         compression_opts=9)

    with h5py.File(path_maps_6D_p2_r, "w") as f:
        f.create_dataset("map_r",
                         data=map_r,
                         compression="gzip",
                         compression_opts=9)


def clip_map_axes(map, xyz, boundary):
    
     # boolean mask for x axis
     x = map[:,0]
     mask_x = (x > (xyz[0] - boundary[0])) & (x < (xyz[0] + boundary[0]))
     
     # boolean mask for y axis
     y = map[:,1]
     mask_y = (y > (xyz[1] - boundary[1])) & (y < (xyz[1] + boundary[1]))
     
     # boolean mask for z axis
     z = map[:,2]
     mask_z = (z > (xyz[2] - boundary[2])) & (z < (xyz[2] + boundary[2]))
     
     # combine the masks and apply to the map
     mask = mask_x & mask_y & mask_z
     map_cl = map[mask,:]
     
     print("map shape:", map.shape)
     print("clipped map shape", map_cl.shape)
     print("---------------------")

     return map_cl

def clip_maps(xyz, boundary):

    path_maps_6D_p2_l = "/home/qiao/Proj_Robman/maps/maps_6D_p2/full_reach_map_gripper_left.h5"
    path_maps_6D_p2_r = "/home/qiao/Proj_Robman/maps/maps_6D_p2/full_reach_map_gripper_right.h5"
    # map_l = pickle.load(open(path_maps_6D_p2_l, 'rb'))
    # map_r = pickle.load(open(path_maps_6D_p2_r, 'rb'))
    
    # open the files in read mode using h5py
    f_l = h5py.File(path_maps_6D_p2_l, "r")
    f_r = h5py.File(path_maps_6D_p2_r, "r")
    
    dset_l = f_l["map_l"]
    dset_r = f_r["map_r"]
    map_l = np.array(dset_l)
    map_r = np.array(dset_r)
    f_l.close()
    f_r.close()
    
    print("shape of map:", map_l.shape, map_r.shape)
    
    map_l_c = clip_map_axes(map_l, xyz, boundary)
    map_r_c = clip_map_axes(map_r, xyz, boundary)

    # define the paths to the output compressed HDF5 files
    path_maps_6D_p2_l_c = "/home/qiao/Proj_Robman/maps/maps_6D_p2_clipped/full_map_left.h5"
    path_maps_6D_p2_r_c = "/home/qiao/Proj_Robman/maps/maps_6D_p2_clipped/full_map_right.h5"

    # define the compression settings for the output files
    comp_kwargs = {"compression": "gzip", "compression_opts": 9}

    # create the output files using h5py
    f_l = h5py.File(path_maps_6D_p2_l_c, "w")
    f_r = h5py.File(path_maps_6D_p2_r_c, "w")

    # create datasets in the output files
    dset_l = f_l.create_dataset("map_l_c", data=map_l_c, **comp_kwargs)
    dset_r = f_r.create_dataset("map_r_c", data=map_r_c, **comp_kwargs)

    # close the output files
    f_l.close()
    f_r.close()


if __name__ == '__main__':
    # pkl_p3TOp2()

    cube = 0.045
    xyz = [0, 0, 0.45 + 0.03]
    boundary = [(0.75 + 0.03) / 2 + 0.1, (0.75 + 0.03) / 2 + 0.1,
                0.2]  # redundant boundary for axes

    clip_maps(xyz, boundary)
